openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    Each user will be presented with a stream of photos (images) in reverse chronological order, with
    information about when each photo was uploaded (date and time) and how many likes and comments
    it has. 
    
    The stream is composed by photos from “following” (other users that the user follows).
    
    Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any
    image (even those uploaded by themself). Only authors can remove their comments.
    
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about
    Alice. Alice can decide to remove the ban at any moment.
    
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse
    chronological order), how many photos have been uploaded, and the user’s followers and following.
    
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    
    Removal of an image will also remove likes and comments.
    
    A user can search other user profiles via username.
    
    A user can log in just by specifying the username. See the “Simplified login” section for details
  version: 0.0.1
tags:
  - name: login
    description: Login API
  - name: users
    description: Users of the system
  - name: ban
    description: Users ban operations
  - name: following
    description: Users following operations 
  - name: photos
    description: Photos posted by the users
  - name: likes
    description: Photos like operations
  - name: comments
    description: Photos comment operations
paths:
  # getUserProfile
  /users:
    get:
      tags:
        - users
      summary: Search by username
      description: | 
        Search for the user matching the provided username and return their profile.
      operationId: getUserProfile
      parameters:
        - name: username
          in: query
          description: The username of the profile to search
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/username'
      responses:
        "200":
          description: Profile found and retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "406":
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
          
  # updateProfile
  # getUserProfileById
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Update profile
      description: |
        Update information about the user profile. The user can change name, surname or his username.
      operationId: updateProfile
      requestBody:
        description: The user with the information to change 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Infomrations changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "406":
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
    
    get:
      tags:
        - users
      summary: Get current user profile
      description: |
        Return the current user profile
      operationId: getUserProfileById
      responses:
        "200":
          description: Profile returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # setMyUserName
  /users/{userId}/username:
    parameters:
      - $ref: '#/components/parameters/userId'
    
    put:
      tags:
        - users
      summary: Change username
      description: |
        Change username to a new one. The user provides a new username and the system verifies the username's validity.
      operationId: setMyUserName
      # parameters:
      #   - name: username
      #     in: query
      #     description: The new username to be validated
      #     required: true
      #     schema:
      #       $ref: '#/components/schemas/User/properties/username'
      requestBody:
        description: The new username to be validated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "200":
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "406":
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
                
  # getMyStream
  /users/{userId}/stream:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - users
      summary: Get followings photos
      description: |
        Return an array of photos posted by the users in the user's following list
      operationId: getMyStream
      parameters:
        - name: page
          in: query
          description: The page count for loading photos.
          schema:
            type: integer
            description: The number of the page to load
            example: 1
            minimum: 0
            maximum: 10000
      responses:
        "200":
          description: Photos returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The array of photos constituting the user's stream.
                minItems: 0
                maxItems: 10
                items:
                  $ref: '#/components/schemas/Photo'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # getProfilePhotos
  /users/{userId}/photos:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - users
      summary: Get user profile photos
      description: |
        Return an array of photos posted by the given user.
      operationId: getProfilePhotos
      parameters:
        - name: page
          in: query
          description: The page count for loading photos.
          schema:
            type: integer
            description: The number of the page to load
            example: 1
            minimum: 0
            maximum: 10000
      responses:
        "200":
          description: Photos returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The array containing photos from the user's stream.
                minItems: 0
                maxItems: 10
                items:
                  $ref: '#/components/schemas/Photo'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # getBanned
  /users/{userId}/banned:
    parameters:
      - $ref: '#/components/parameters/userId'
    
    get:
      tags:
        - ban
      summary: Return user banned
      description: |
        Return the list of users banned by the given user
      operationId: getBanned
      responses:
        "200":
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The list of the users
                minItems: 0
                maxItems: 2147483647  #integer max value
                items:
                  $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # banUser
  # unbanUser
  /users/{userId}/banned/{bannedId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - name: bannedId
        in: path
        description: Id of ther user to ban
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - ban
      summary: Ban an user
      description: |
        Put an user in the banned list. The users in this list cannot see any information about the current user
      operationId: banUser
      responses:
        "200":
          description: The user was already banned
          content:
            text/plain:
              schema:
                type: string
                description: Message containing info about the operation
        "201":
          description: User banned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: 
        - ban
      summary: Unban an user
      description: | 
        Remove an user from the banned list
      operationId: unbanUser
      responses:
        "200":
          description: User unbanned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # getFollowing
  /users/{userId}/following:
    parameters:
      - $ref: '#/components/parameters/userId'
    
    get:
      tags:
        - following
      summary: Return user followings
      description: |
        Return the list of users followed by the given user
      operationId: getFollowings
      responses:
        "200":
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The list of the users
                minItems: 0
                maxItems: 2147483647  #integer max value
                items:
                  $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # getFollowers
  /users/{userId}/followers:
    parameters:
      - $ref: '#/components/parameters/userId'

    get:
      tags:
        - following
      summary: Return user followers
      description: |
        Return the list of users who follow the given user
      operationId: getFollowers
      responses:
        "200":
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The list of the users
                minItems: 0
                maxItems: 2147483647  #integer max value
                items:
                  $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # followUser
  # unfollowUser
  /users/{userId}/following/{followingId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - name: followingId
        in: path
        description: Id of the user to follow
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - following
      summary: Follow another user
      description: |
        Put an user in the following list. The current user will be able to see photos posted by the users in this list.
      operationId: followUser
      responses:
        "200":
          description: User was already followed
          content:
            text/plain:
              schema: 
                type: string
                description: Message containing info about the operation
        "201":
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      
    delete:
      tags: 
        - following
      summary: Unfollow an user
      description: | 
        Remove an user from the following list.
      operationId: unfollowUser
      responses:
        "200":
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # uploadPhoto
  /photos:
    post:
      tags:
        - photos
      summary: Upload a new photo
      description: |
        Upload a new photo in the user profile.
      operationId: uploadPhoto
      parameters:
        - name: caption
          in: query
          description: Short optional description of the photo 
          required: true
          schema:
            type: string
            minLength: 0
            maxLength: 1000
            pattern: ".*"
            example: Look at my post!
      requestBody:
        description: The photo to be posted
        content:
          image/*:
            schema:
              $ref: '#/components/schemas/Image'     
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "406": 
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # deletePhoto
  /photos/{photoId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
    delete:
      tags:
        - photos
      summary: Delete a photo
      description: |
        Delete a photo from the user profile using its ID. This will also delete all associated likes and comments.
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # getLikes
  /photos/{photoId}/likes:
    parameters:
      - $ref: '#/components/parameters/photoId'
    
    get:
      tags:
        - likes
      summary: Return photo likes
      description: |
        Return the list of likes for the given photo
      operationId: getLikes
      responses:
        "200":
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The list of likes
                minItems: 0
                maxItems: 1000000
                items:
                  $ref: '#/components/schemas/Like'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # likePhoto
  # unlikePhoto
  /photos/{photoId}/likes/{likedId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
      - name: likedId
        in: path
        description: Id of the user putting the like
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - likes
      summary: Put a like
      description: |
        The user can put a like to a photo. If the photo has already been liked, no changes will be made.
      operationId: likePhoto
      responses:
        "200":
          description: Photo already liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        "201":
          description: Photo liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - likes
      summary: Remove a like
      description: |
        The user can remove a like to a photo
      operationId: unlikePhoto
      responses:
        "200":
          description: Photo unliked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
  # getComments
  # commentPhoto
  /photos/{photoId}/comments:
    parameters:
      - $ref: '#/components/parameters/photoId'

    get:
      tags:
        - comments
      summary: Return photo comments
      description: |
        Return the list of comments for the given photo
      operationId: getComments
      responses:
        "200":
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The list of comments
                minItems: 0
                maxItems: 1000000
                items:
                  $ref: '#/components/schemas/Comment'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - comments
      summary: Post a comment
      description: |
        Leave a text comment on a photo
      operationId: commentPhoto
      requestBody:
        description: The text comment along with the corresponding user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "406": 
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
      
  # uncommentPhoto
  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
      - name: commentId
        in: path
        description: Id of the comment
        required: true
        schema:
          $ref: '#/components/schemas/Comment/properties/id'
    delete:
      tags:
        - comments
      summary: Remove a comment
      description: |
        Remove a comment on a photo
      operationId: uncommentPhoto
      responses:
        "200":
          description: Comment removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      
  #doLogin
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object with the user ID of the recently logged-in user.
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: integer
                    example: 1
                    description: The user ID of the recently logged-in user.
        "400": 
          $ref: '#/components/responses/BadRequest'
        "406":
          $ref: '#/components/responses/NotAcceptable'
        "500":
          $ref: '#/components/responses/InternalServerError'
      # Only disable bearer authentication for this method
      security: []

components:
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
  parameters:
    userId:
      name: userId
      in: path
      description: Unique Id of the current user
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/id'
    photoId:
      name: photoId
      in: path
      description: The unique id of the photo
      required: true
      schema:
        $ref: '#/components/schemas/Photo/properties/id'
  schemas:
    Username:
      type: string
      description: The username of the user. Should be aplhanumeric between 3 and 16 characters.
      example: Maria99
      pattern: '^[a-zA-Z0-9._]{3,16}$'
      minLength: 3
      maxLength: 16
    Image:
      description: The binary representation of the photo. Max 20MB supported
      type: string
      format: binary
      minLength: 1
      maxLength: 20971520
    User:
      description: |
        The profile of the user
      type: object
      properties:
        id:
          type: integer
          description: The ID of the user
          example: 1
          readOnly: true
        username:         
          $ref: "#/components/schemas/Username"
        name:
          type: string
          description: The user's name
          pattern: '.*'
          example: Maria
          minLength: 1
          maxLength: 20
        surname:
          type: string
          description: The user's surname
          pattern: '.*'
          example: Rossi
          minLength: 1
          maxLength: 25
        followersCount:
          type: integer
          description: The number of users who follow the current user
          example: 10
          minimum: 0
          readOnly: true
        followingCount:
          type: integer
          description: The number of users followed by the current user
          example: 10
          minimum: 0
          readOnly: true
        photoCount:
          type: integer
          description: The number of photos posted by the user
          example: 12
          minimum: 0
          readOnly: true
        followed:
          type: boolean
          description: True if the searching user follows the found user
          example: false
          readOnly: true
    Photo:
      description: |
        A single photo posted by an user
      type: object
      properties:
        id:
          type: integer
          description: The ID of the photo
          example: 1
          readOnly: true
        user:
          $ref: '#/components/schemas/User/properties/id'
        username:
          $ref: '#/components/schemas/Username'
        image:
          $ref: '#/components/schemas/Image'
        timestamp:
          type: string
          description: The date and time when the image was posted
          format: date-time
          example: "2017-07-21T17:32:28Z"
          minLength: 20
          maxLength: 20
          readOnly: true
        likeCount:
          description: The total number of likes the photo received
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        commentCount:
          description: The total number of comments the photo received
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        liked:
          description: This is used to determine if the user put like to the photo
          type: boolean
          example: false
          readOnly: true
    Comment:
      type: object
      description: A comment made by a user on a photo, along with its timestamp.
      properties:
        id:
          type: integer
          example: 1
          description: The Id of the comment
          readOnly: true
        text:
          type: string
          pattern: '.*'
          example: I like this photo!
          description: The text of the comment
          minLength: 1
          maxLength: 5000
        user:
          $ref: '#/components/schemas/User/properties/id'
        username:
          type: string
          description: The username of the user. Should be aplhanumeric between 3 and 16 characters.
          example: Maria99
          pattern: '^[a-zA-Z0-9._]{3,16}$'
          minLength: 3
          maxLength: 16
          readOnly: true
        photo:
          $ref: '#/components/schemas/Photo/properties/id' 
        date:
          type: string
          description: The date and time when the comment was posted
          format: date-time
          example: "2017-07-21T17:32:28"
          minLength: 19
          maxLength: 19
          readOnly: true
    Like:
      type: object
      description: A user expressing their approval or appreciation by clicking the "like" button on a photo.
      properties:
        user:
          $ref: '#/components/schemas/User/properties/id'
        username:
          $ref: '#/components/schemas/Username'
        photo:
          $ref: '#/components/schemas/Photo/properties/id'
    Message:
      description: Message containing additional info about the response
      type: string
      minLength: 0
      maxLength: 255
      readOnly: true
  responses:
    BadRequest:
      description: |
        The server could not understand the request due to malformed syntax, invalid parameters, or missing required information.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Message'
    Unauthorized:
      description: |
        The server could not understand the request due to malformed syntax, invalid parameters, or missing required information.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Message'
    NotFound:
      description: |
        Resource not found. The requested URL or endpoint does not exist.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Message'
    NotAcceptable:
      description: |
        Requested representation not acceptable. Adjust request headers or content.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Message'
    InternalServerError:
      description: |
        Internal Server Error. An unexpected server error occurred while processing the request.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Message'

# Apply bearer authentication to every method
security:
  - userAuth: []
          
