openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    Each user will be presented with a stream of photos (images) in reverse chronological order, with
    information about when each photo was uploaded (date and time) and how many likes and comments
    it has. 
    
    The stream is composed by photos from “following” (other users that the user follows).
    
    Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any
    image (even those uploaded by themself). Only authors can remove their comments.
    
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about
    Alice. Alice can decide to remove the ban at any moment.
    
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse
    chronological order), how many photos have been uploaded, and the user’s followers and following.
    
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    
    Removal of an image will also remove likes and comments.
    
    A user can search other user profiles via username.
    
    A user can log in just by specifying the username. See the “Simplified login” section for details
  version: 0.0.1
tags:
  - name: login
    description: Login API
  - name: users
    description: Users of the system
  - name: photos
    description: Photos posted by the users
paths:
  # createUser
  /users:
    post:
      tags:
        - users
      summary: create a new user
      description: |
        Create a new user and return the identifier.
      operationId: createUser
      requestBody:
        description: The username of the new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "201":
          description: New user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/id'
        "400":
          description: Username already taken
  
  # getUserProfile
  /users/getUserProfile:
    get:
      tags:
        - users
      summary: Search by username
      description: | 
        Search for the user matching the provided username and return their profile.
      operationId: getUserProfile
      parameters:
        - name: username
          in: query
          description: The username of the profile to search
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/username'
      responses:
        "200":
          description: Profile found and retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          
  # setMyUserName
  # getUserProfileById
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Change username
      description: |
        Change username to a new one. The user provides a new username and the system verifies the username's validity.
      operationId: setMyUserName
#      parameters:
#        - name: username
#          in: query
#          description: The new username to be validated
#          required: true
#          schema:
#            $ref: '#/components/schemas/User/properties/username'
      requestBody:
        description: The new username to be validated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "200":
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Username already used
        "404":
          description: User not found
    
    get:
      tags:
        - users
      summary: Get current user profile
      description: |
        Return the current user profile
      operationId: getUserProfileById
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
                
  # getMyStream
  /users/{userId}/getMyStream:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - users
      summary: Get followings photos
      description: |
        Return an array of photos posted by the users in the user's following list
      operationId: getMyStream
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
                  
  # banUser
  # /users/{userId}/banned:

  # banUser
  # unbanUser
  /users/{userId}/banned/{bannedId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - name: bannedId
        in: path
        description: Id of ther user to ban
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - users
      summary: Ban an user
      description: |
        Put an user in the banned list. The users in this list cannot see any information about the current user
      operationId: banUser
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      tags: 
        - users
      summary: Unban an user
      description: | 
        Remove an user from the banned list
      operationId: unbanUser
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Banned user not found

  # followUser
  #/users/{userId}/following:  

  # followUser
  # unfollowUser
  /users/{userId}/following/{followingId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - name: followingId
        in: path
        description: Id of the user to follow
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - users
      summary: Follow another user
      description: |
        Put an user in the following list. The current user will be able to see photos posted by the users in this list.
      operationId: followUser
      responses:
        "200":
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      
    delete:
      tags: 
        - users
      summary: Unfollow an user
      description: | 
        Remove an user from the following list.
      operationId: unfollowUser
      responses:
        "200":
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Following user not found
  
  # uploadPhoto
  /photos:
    post:
      tags:
        - photos
      summary: Upload a new photo
      description: |
        Upload a new photo in the user profile.
      operationId: uploadPhoto
      requestBody:
        description: Create a new photo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
  
  # deletePhoto
  /photos/{photoId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
    delete:
      tags:
        - photos
      summary: Delete a photo
      description: |
        Delete a photo from the user profile using its ID. This will also delete all associated likes and comments.
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        "404":
          description: Photo not found
  
  # likePhoto
  # /photos/{photoId}/likes:
  
  # likePhoto
  # unlikePhoto
  /photos/{photoId}/likes/{likedId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
      - name: likedId
        in: path
        description: Id of the user putting the like
        required: true
        schema:
          $ref: '#/components/schemas/User/properties/id'

    put:
      tags:
        - photos
      summary: Put a like
      description: |
        The user can put a like to a photo. If the photo has already been liked, no changes will be made.
      operationId: likePhoto
      responses:
        "200":
          description: Photo already liked
        "201":
          description: Photo liked successfully
        "404":
          description: Photo not found

    delete:
      tags:
        - photos
      summary: Remove a like
      description: |
        The user can remove a like to a photo
      operationId: unlikePhoto
      responses:
        "200":
          description: Photo unliked successfully
        "404":
          description: Photo or like not found
  
  # commentPhoto
  /photos/{photoId}/comments:
    parameters:
      - $ref: '#/components/parameters/photoId'
    post:
      tags:
        - photos
      summary: Post a comment
      description: |
        Leave a text comment on a photo
      operationId: commentPhoto
      requestBody:
        description: The text comment along with the corresponding user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "404":
          description: Photo not found
      
  # uncommentPhoto
  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/photoId'
      - name: commentId
        in: path
        description: Id of the comment
        required: true
        schema:
          $ref: '#/components/schemas/Comment/properties/id'
    delete:
      tags:
        - photos
      summary: Remove a comment
      description: |
        Remove a comment on a photo
      operationId: uncommentPhoto
      responses:
        "200":
          description: Comment removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        "404":
          description: Photo or comment not found
      
  #doLogin
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: integer
                    example: 1
      # Only disable bearer authentication for this method
      security: []

components:
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
  parameters:
    userId:
      name: userId
      in: path
      description: Id of the current user
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/id'
    photoId:
      name: photoId
      in: path
      description: The id of the photo
      required: true
      schema:
        $ref: '#/components/schemas/Photo/properties/id'
  schemas:
    Username:
      type: string
      example: Maria99
      pattern: 'ˆ.*?$'
      minLength: 3
      maxLength: 16
    UserProfile:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
        following:
          type: array
          items:
            $ref: '#/components/schemas/User'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      description: |
        The profile of the user
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        username:
#          type: string
#          example: Maria
#          pattern: 'ˆ.*?$'
#          minLength: 3
#          maxLength: 16          
          $ref: "#/components/schemas/Username"
        name:
          type: string
          example: Maria
          minLength: 1
          maxLength: 20
        surname:
          type: string
          example: Rossi
          minLength: 1
          maxLength: 25
        followersCount:
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        followingCount:
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        photoCount:
          type: integer
          example: 12
          minimum: 0
          readOnly: true
    Photo:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        user:
          $ref: '#/components/schemas/User/properties/id'
        image:
          type: string
          format: binary
          #example: "/images/imageId"
        timestamp:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: id of the comment
          readOnly: true
        text:
          type: string
          example: i like this photo!
          description: text of the comment
          minLength: 1
        user:
          $ref: '#/components/schemas/User/properties/id'

# Apply bearer authentication to every method
security:
  - userAuth: []
          
